c''
colnames(my_data,cnames)
?colnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 NOT 7
5 != 7
5 !== 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
?sample
ints
ints>5
which(ints>7)
any(ints <0)
all(ints>0)
#form 1
if(x>3){y<-10} else {y<-0}
#form 1
for(i <- 1:10){if(x[i]>3){y[i]<-10} else {y[i]<-0}
#form 1
for(i in 1:10){if(x[i]>3){y[i]<-10} else {y[i]<-0}
#form 1
for(i in 1:10)if(x[i]>3){y[i]<-10} else {y[i]<-0}
if(x>4){y<-10}else{y<-0}
#form2
y<-if(x<4){10}else{0}
y
#form2
y <- if(x<4){10}else{0}
x
11
1.
install.packages("swirl")
#... (collects all arguments so you don't need to write them all) (first arg in paste())
?paste
?cat #concatenate
#anything after ... can't be partially matched
paste("a","b".sep=":")
#anything after ... can't be partially matched
paste("a","b",sep=":")
paste("a","b",se=":")
#Scoping Rules - Symbol Binding
lm <- function(x){pi*x^2}
#lm function created (bound values to symbol; lm could be your function or stats one)
#environments -- searches environment for the value
lm(3)
lm(1)
search()
#Scoping Rules: lexical scoping OR static scoping
f <- function(x,y) {
x^2 + y /z
}
f(1,2)
make.power(3)
make.power <- function(n){
pow <- function(x){
x^n
}
pow
}
make.power(3)
cube <- make.power(3)
square <- make.power(2)
cube(3)
cube(4)
square(3)
ls(environment(cube))
get("n",environment(cube))
?ls
y <- 10
f <- function(x){
y <- 2
y^2 + g(x)
}
g <- function(x){
x*y
}
f(3)#What is f(3)?
View(g)
f(3)
f(2)
f(4)
#Let's confuse you.  (appearance of dynamic scoping but not really)
g <- function(x){
a<-3
x+a+y
}
g(2)
g <- function(x){
a<-3
x+a+y
g(2)
g <- function(x){
a<-3
x+a+y
g <- function(x){
a<-3
x+a+y
sss
stoppppppp
}
g <- function(x){
a<-3
x+a+y
}
g(2)
rm(list=ls())
g <- function(x){
a<-3
x+a+y
}
g(2)
y=3
g(2)
rm(list=ls()) #CLEAR ENVIRONMENT
nLL<-make.NegLogLik(normals,c(1,FALSE))
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type=1)
make.NegLogLik <- function(data,fixed=c(FALSE,FALSE)) {
params <- fixed
function(p){
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
nLL<-make.NegLogLik(normals,c(1,FALSE))
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type=1)
set.seed(1);normals <- rnorm(100,1,2)
nLL<-make.NegLogLik(normals,c(1,FALSE))
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type=1)
nLL <- make.NegLogLik(normals)
nLL
nLL<-make.NegLogLik(normals,c(1,FALSE))
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type=1)
nLL<-make.NegLogLik(normals,c(1,FALSE))
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type="1")
nLL<-make.NegLogLik(normals,c(1,FALSE))
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type="0")
?plot
nLL<-make.NegLogLik(normals,c(1,FALSE))
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type="l")
nLL<-make.NegLogLik(normals,c(FALSE,2))
x<-seq(.5,1.5,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type="l")
swirl()
library(swirl)
rm(list-ls())
swirl()
class(POSIXlt())
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- "1969-01-01"
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSITXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t11)
months(51)
months(t1)
quarters(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(,t1,units='days'))
difftime(Sys.time(),t1,units='days'))
difftime(Sys.time(),t1,units='days')
install.packages(lubridate)
#advanced date time
install.packages('lubridate')
cd
cd()
rm=list(ls())
rm(list = ls()) #CLEAR ENVIRONMENT
directory <- '~/specdata'
setwd(directory)
getwd()
file <- paste('0','0',x,'.csv',sep="")
file <- paste('0','0',x,'.csv',sep="")
x <- 1
file <- paste('0','0',x,'.csv',sep="")
check <- read.csv(file)
check$sulfate
file <- paste('0','0',x,'.csv',sep="")
x <- 1:10
file <- paste('0','0',x,'.csv',sep="")
file
## 'pollutant' is a character vector of length 1 indicating the
## name of the pollutant for which we will calculate the mean;
## either 'sulfate' or 'nitrate'
pollutant <- c('sulfate','nitrate')
length(pollutant)
## 'pollutant' is a character vector of length 1 indicating the
## name of the pollutant for which we will calculate the mean;
## either 'sulfate' or 'nitrate'
pollutant <- 'sulfate'
length(pollutant)
id=1:332
directory <- '~/specdata'
setwd(directory)
if(id < 10){
data <- read.csv(paste('0','0',id,'.csv',sep=""))
} else if (id<100){
data <- read.csv(paste('0',id,'.csv',sep=""))
}else{
data<-read.csv(paste(id,sep=""))
}
data
id=1:332
directory <- '~/specdata'
setwd(directory)
if(id < 10){
data <- read.csv(paste('0','0',id,'.csv',sep=""))
} else if (id<100){
data <- read.csv(paste('0',id,'.csv',sep=""))
}else{
data<-read.csv(paste(id,sep=""))
}
data
if(id < 10){
data <- read.csv(paste('0','0',id,'.csv',sep=""))
if(id < 10){
data <- read.csv(paste('0','0',id,'.csv',sep=""))
}
x <- 1:10
for x < 10 {
file <- paste('0','0',x,'.csv',sep="")
}
for x[1:9] {
file <- paste('0','0',x,'.csv',sep="")
}
file <- paste('0','0',x[1:9],'.csv',sep="")
file
x <- 1:101
file <- paste(paste('0','0',x[1:9],'.csv',sep=""),paste('0',x[10:99],'.csv',sep=""),paste(x[100:length(x)],'.csv',sep=""))
file
file <- c(paste('0','0',x[1:9],'.csv',sep=""),paste('0',x[10:99],'.csv',sep=""),paste(x[100:length(x)],'.csv',sep=""))
file
check <- read.csv(file)
check <- read.csv(file[1:101])
$lapply
?lapply
data <- do.call(rbind,lapply(files,read.csv))
files <- dir(directory)
data <- do.call(rbind,lapply(files,read.csv))
files <- dir(directory)
data <- do.call(rbind,lapply(files,read.csv))
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
id <- data$ID
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
meanpol <- mean(!is.na(data$pollutant))
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
useful <- mean(data$pollutant,na.rm = TRUE)
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
useful <- mean(data$nitrate,na.rm = TRUE)
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
useful <- mean(data$pollutant,na.rm = TRUE)
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
useful <- mean(data$sulfate,na.rm = TRUE)
## 'pollutant' is a character vector of length 1 indicating the
## name of the pollutant for which we will calculate the mean;
## either 'sulfate' or 'nitrate'
colnames(data)
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
id <- 1:332
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
useful <- mean(data[id]$pollutant,na.rm = TRUE)
pollutant <- 'sulfate'
length(pollutant)
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
useful <- mean(data[id]$pollutant,na.rm = TRUE)
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
useful <- mean(data[,id]$pollutant,na.rm = TRUE)
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
useful <- mean(data[id]$sulfate,na.rm = TRUE)
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
useful <- mean(data$sulfate,na.rm = TRUE)
pollutantmean <- function(directory,pollutant,id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of CSV files
directory <- '~/specdata'
setwd(directory)
files <- dir(directory)
data <- do.call(rbind,lapply(files,read.csv))
## 'pollutant' is a character vector of length 1 indicating the
## name of the pollutant for which we will calculate the mean;
## either 'sulfate' or 'nitrate'
pollutant <- 'sulfate'
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
id <- 1:332
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
useful <- mean(data$sulfate,na.rm = TRUE)
}
View(pollutantmean)
source(pollutantmean)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
pollutant <- names(data)
rm(list=ls())
wtf am i doing
alldata <- do.call(rbind,lapply(files,read.csv))
directory <- '~/specdata'
setwd(directory)
files <- dir(directory)
alldata <- do.call(rbind,lapply(files,read.csv))
setwd(c('~/'+directory)
files <- dir(directory)
alldata <- do.call(rbind,lapply(files,read.csv))
## 'pollutant' is a character vector of length 1 indicating the
## name of the pollutant for which we will calculate the mean;
## either 'sulfate' or 'nitrate'
pollutant <- names(data)
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
id <-
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
useful <- mean(data$sulfate,na.rm = TRUE)
}
?id
setwd(c('~/'+directory))
getwd()
setwd(c('~/'+directory))
setwd(c('~/',directory))
getwd()
#Pollutant Mean Formula
directory <- '~/specdata'
directory <- 'specdata'
setwd(c('~/',directory))
getwd()
dir <- c('/',directory)
dir <- paste('/',directory)
dir <- paste('/',directory,sep="")
dir <- paste('~/',directory,sep="")
setwd(dir)
getwd()
direct <- paste('~/',directory,sep="")
setwd(direct)
rm(list=ls())
getwd()
files <- dir(direct)
direct <- paste('~/',directory,sep="")
setwd(direct)
directory <- 'specdata'
setwd(direct)
direct <- paste('~/',directory,sep="")
setwd(direct)
getwd()
files <- dir(direct)
alldata <- do.call(rbind,lapply(files[id],read.csv))
x <- 3:9
alldata <- do.call(rbind,lapply(files[x],read.csv))
alldata <- do.call(rbind,lapply(files,read.csv))
somedata <- do.call(rbind,lapply(files[x],read.csv))
2+2
exp(-2)
rnorm(10)
rnorm(10)
rnorm(15)
rnorm(15)
rm=list(ls())
rm(list=ls())
x <- 2
x
x+x
## 1.1.3 Vectorized Arithmetic
weight <- c(60,72,57,90,95,72)
weight
#can do vector calculations if same length
height <- c(1.75,1.80,1.65,1.90,1.74,1.91)
bal <- weight/height^2
#mean, stdev
sum(weight)
sum(weight)/length(weight)
xbar <- sum(weight)/length(weight)
xbar(height)
xbar(x)(
sum(x)/length(x)
)
xbar(x)(
sum(x)/length(x)
)
xbar(a){
sum(x)/length(x)
}
xbar(a){
sum(x)/length(x)
}
xbar(a){
sum(x)/length(x)
xbar(a){
sum(a)/weight(a)
}
xbar <- sum(weight)/length(weight)
rm(list=ls())
weight <- c(60,72,57,90,95,72)
height <- c(1.75,1.80,1.65,1.90,1.74,1.91)
bal <- weight/height^2
sum(weight)
sum(weight)/length(weight)
xbar <- sum(weight)/length(weight)
weight - xbar
(weight - xbar)^2
sd <- sqrt(sum(weight - xbar)^2)/length(weight)-1)
sd <- sqrt(sum(weight - xbar)^2)/length(weight) - 1)
sd <- sqrt(sum(weight - xbar)^2)/(length(weight) - 1)
sd <- sqrt(sum((weight - xbar)^2)/(length(weight) - 1)
sd <- sqrt(sum((weight - xbar)^2)/(length(weight) - 1)
sd <- sqrt(sum((weight - xbar)^2)/(length(weight) - 1))
sd <- sqrt(sum((weight - xbar)^2)/(length(weight) - 1)
sd <- sqrt(sum((weight - xbar)^2)/(length(weight) - 1))
sd <- sqrt(sum((weight - xbar)^2)/(length(weight) - 1))
sd <- sqrt(sum((weight - xbar)^2)/(length(weight) - 1)
source('~/GitHub/R2D2/introstatswR.R')
#but that shit's in there already, soooo
mean(weight)
sd(weight)
sdev <- sqrt(sum((weight - xbar)^2)/(length(weight) - 1))
rm(list=ls())
# use t-test to assume an average for BMI
?t.test
## 1.1.3 Vectorized Arithmetic
weight <- c(60,72,57,90,95,72)
#can do vector calculations if same length
height <- c(1.75,1.80,1.65,1.90,1.74,1.91)
t.test(bmi, mu=22.5) #mu defaults to 0 if not given
bmi <- weight/height^2
t.test(bmi, mu=22.5) #mu defaults to 0 if not given
plot(height,weight)
hh <- c(1.65,1.70,1.75,1.80,1.85,1.90)
lines(hh,22.5 * hh^2)
source('~/GitHub/R2D2/introstatswR.R')
source('~/GitHub/R2D2/introstatswR.R')
source('~/GitHub/R2D2/introstatswR.R')
