## number of completely observed observation (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## return a numeric vector of correlations
## NOTE: Do not round the result!
setwd('~/Github/R2D2')
corky
}
corr <- function(directory, threshold = 0){
## y'all really making me type that
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
#setwd(directory)
setwd(dir) #testing
#getwd()
#files <- dir(directory)
files <- dir(dir)
'for (x in id) {
somedata <- do.call(rbind,lapply(files[x],read.csv))
# id is integer for id numbers
## Return data frame of the form:
## id   nobs
## 1    117
## 2   1041
## ...
## where id is ID# and nobs is # complete cases
ids = c(ids,x)
nobs = c(nobs,sum(complete.cases(somedata)))
}'
#alldata <- do.call(rbind,lapply(files,read.csv))
comp <- complete(dir)
#threshold = 600
x <- comp$id[comp$nobs>threshold]
setwd(dir)
somedata <- do.call(rbind,lapply(files[x],read.csv))
someusefuldata <- na.omit(somedata)
howmuch <- length(someusefuldata$Date)
i <- 1:howmuch
corky<-vector()
for (i in howmuch){
corky <- cor(someusefuldata$sulfate[i],someusefuldata$nitrate[i],use = "complete.obs")
}
#threshold = 400 #testing
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observation (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## return a numeric vector of correlations
## NOTE: Do not round the result!
setwd('~/Github/R2D2')
corky
}
corr <- function(directory, threshold = 0){
## y'all really making me type that
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
#setwd(directory)
setwd(dir) #testing
#getwd()
#files <- dir(directory)
files <- dir(dir)
'for (x in id) {
somedata <- do.call(rbind,lapply(files[x],read.csv))
# id is integer for id numbers
## Return data frame of the form:
## id   nobs
## 1    117
## 2   1041
## ...
## where id is ID# and nobs is # complete cases
ids = c(ids,x)
nobs = c(nobs,sum(complete.cases(somedata)))
}'
#alldata <- do.call(rbind,lapply(files,read.csv))
comp <- complete(dir)
#threshold = 600
x <- comp$id[comp$nobs>threshold]
setwd(dir)
somedata <- do.call(rbind,lapply(files[x],read.csv))
someusefuldata <- na.omit(somedata)
howmuch <- length(someusefuldata$Date)
i <- 1:howmuch
corky<-vector()
for (i in 1:howmuch){
corky <- c(corky,cor(someusefuldata$sulfate,someusefuldata$nitrate,use = "complete.obs"))
}
#threshold = 400 #testing
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observation (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## return a numeric vector of correlations
## NOTE: Do not round the result!
setwd('~/Github/R2D2')
corky
}
corr <- function(directory, threshold = 0){
## y'all really making me type that
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
#setwd(directory)
setwd(dir) #testing
#getwd()
#files <- dir(directory)
files <- dir(dir)
'for (x in id) {
somedata <- do.call(rbind,lapply(files[x],read.csv))
# id is integer for id numbers
## Return data frame of the form:
## id   nobs
## 1    117
## 2   1041
## ...
## where id is ID# and nobs is # complete cases
ids = c(ids,x)
nobs = c(nobs,sum(complete.cases(somedata)))
}'
#alldata <- do.call(rbind,lapply(files,read.csv))
comp <- complete(dir)
#threshold = 600
x <- comp$id[comp$nobs>threshold]
setwd(dir)
somedata <- do.call(rbind,lapply(files[x],read.csv))
someusefuldata <- na.omit(somedata)
howmuch <- length(someusefuldata$Date)
i <- 1:howmuch
corky <- c(corky,cor(someusefuldata$sulfate,someusefuldata$nitrate,use = "complete.obs"))
#threshold = 400 #testing
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observation (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## return a numeric vector of correlations
## NOTE: Do not round the result!
setwd('~/Github/R2D2')
corky
}
someusefuldata$nitrate[1]
rm(corky)
corr <- function(directory, threshold = 0){
## y'all really making me type that
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
#setwd(directory)
setwd(dir) #testing
#getwd()
#files <- dir(directory)
files <- dir(dir)
'for (x in id) {
somedata <- do.call(rbind,lapply(files[x],read.csv))
# id is integer for id numbers
## Return data frame of the form:
## id   nobs
## 1    117
## 2   1041
## ...
## where id is ID# and nobs is # complete cases
ids = c(ids,x)
nobs = c(nobs,sum(complete.cases(somedata)))
}'
#alldata <- do.call(rbind,lapply(files,read.csv))
comp <- complete(dir)
#threshold = 600
x <- comp$id[comp$nobs>threshold]
setwd(dir)
somedata <- do.call(rbind,lapply(files[x],read.csv))
someusefuldata <- na.omit(somedata)
howmuch <- length(someusefuldata$Date)
i <- 1:howmuch
rm(corky)
corky <- c(corky,cor(someusefuldata$sulfate,someusefuldata$nitrate,use = "complete.obs"))
#threshold = 400 #testing
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observation (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## return a numeric vector of correlations
## NOTE: Do not round the result!
setwd('~/Github/R2D2')
corky
}
cr <- corr(dir,400)
corr <- function(directory, threshold = 0){
## y'all really making me type that
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
#setwd(directory)
setwd(dir) #testing
#getwd()
#files <- dir(directory)
files <- dir(dir)
'for (x in id) {
somedata <- do.call(rbind,lapply(files[x],read.csv))
# id is integer for id numbers
## Return data frame of the form:
## id   nobs
## 1    117
## 2   1041
## ...
## where id is ID# and nobs is # complete cases
ids = c(ids,x)
nobs = c(nobs,sum(complete.cases(somedata)))
}'
#alldata <- do.call(rbind,lapply(files,read.csv))
comp <- complete(dir)
#threshold = 600
x <- comp$id[comp$nobs>threshold]
setwd(dir)
somedata <- do.call(rbind,lapply(files[x],read.csv))
someusefuldata <- na.omit(somedata)
howmuch <- length(someusefuldata$Date)
i <- 1:howmuch
corky <- c(corky,cor(someusefuldata$sulfate,someusefuldata$nitrate,use = "complete.obs"))
#threshold = 400 #testing
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observation (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## return a numeric vector of correlations
## NOTE: Do not round the result!
setwd('~/Github/R2D2')
corky
}
cr <- corr(dir,400)
head(cr)
corr <- function(directory, threshold = 0){
## y'all really making me type that
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
#setwd(directory)
setwd(dir) #testing
#getwd()
#files <- dir(directory)
files <- dir(dir)
'for (x in id) {
somedata <- do.call(rbind,lapply(files[x],read.csv))
# id is integer for id numbers
## Return data frame of the form:
## id   nobs
## 1    117
## 2   1041
## ...
## where id is ID# and nobs is # complete cases
ids = c(ids,x)
nobs = c(nobs,sum(complete.cases(somedata)))
}'
#alldata <- do.call(rbind,lapply(files,read.csv))
comp <- complete(dir)
#threshold = 600
x <- comp$id[comp$nobs>threshold]
setwd(dir)
somedata <- do.call(rbind,lapply(files[x],read.csv))
someusefuldata <- na.omit(somedata)
howmuch <- length(someusefuldata$Date)
i <- 1:howmuch
corky <- cor(someusefuldata$sulfate,someusefuldata$nitrate,use = "complete.obs")
#threshold = 400 #testing
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observation (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## return a numeric vector of correlations
## NOTE: Do not round the result!
setwd('~/Github/R2D2')
corky
}
corky <- cor(someusefuldata$sulfate[i],someusefuldata$nitrate[i],use = "complete.obs")
corky <- cor(someusefuldata$sulfate,someusefuldata$nitrate,use = "complete.obs")
corr <- function(directory, threshold=0)
{
file_names <- list.files(directory, full.names = TRUE)
dat <- numeric()
for (i in 1:length(file_names)){
moni_i <- read.csv(file_names[i])
nobs <- sum(complete.cases(moni_i))
if (nobs>threshold){
dat <- c(dat, cor(moni_i$sulfate, moni_i$nitrate,use="complete.obs"))
}
}
dat
}
cr <- corr(dir)
cr <- sort(cr)
cr <- corr(dir)
cr <- sort(cr)
RNGversion("3.5.1")
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
RNGversion("3.5.1")
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr(dir, 129)
cr <- sort(cr)
n <- length(cr)
RNGversion("3.5.1")
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr(dir, 2000)
n <- length(cr)
cr <- corr(dir, 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
pollutantmean(dir,'nitrate',3)
?lapply
rm(list=ls())
#sample lapply
x <- list(a=1:5,b=rnorm(10))
lapply(x,mean)
#sample lapply
x <- list(a=1:5,b=rnorm(10))
lapply(x,mean)
#sample 2
x <- list(a = 1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
lapply(x,mean)
#uniformed random variables
lapply(x,runif)
#uniformed random variables
x <- 1:4
lapply(x,runif)
?runif
#0 and 10 uniform?
lapply(x,runif,min=0,max=10)
# lapply and friends use anonymous functions
x <- list(a = matrix(1:4,2,2), b = matrix(1:6,3,2))
x
# lapply and friends use anonymous functions
x <- list(a = rbind(matrix(1:4,2,2)), b = matrix(1:6,3,2))
x
# lapply and friends use anonymous functions
x <- list(a = cbind(matrix(1:4,2,2)), b = matrix(1:6,3,2))
x
lapply(x,function(elt) elt[,1])
#again
x <- list(a = 1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
lapply(x,mean)
sapply(x,mean)
''
str(apply)
x <- matrix(rnorm(200),20,10)
apply(x,2,mean)
#mean of each row
apply(x,1,sum)
View(x)
# other ways to apply
#what is quantile
?quantile
apply(x,1,quantile,probs=c(0.25,0.75))
#average matrix in an array
a <- array(rnorm(2*2*10),c(2,2,10))
apply(a,c(1,2).mean)
apply(a,c(1,2),mean)
rowMeans(a,dims=2)
view(a)
?view
View(a)
#MAPPLY
?mapply
str(mapply)
# example
list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
#ORRRR
mapply(rep,1:4,4:1)
noise <- function(n,mean,sd){
rnorm(n,mean,sd)
}
noise(5,1,2)
noise(1:5,1:5,2)
mapply(noise,1:5,1:5,2)
rm(list=ls())
getwd()
x <- c(rnorm(10),runif(10),rnorm(10,1))
f <- gl(3,10)
f
#tapply
tapply(x,f,mean)
# without simplify
tapply(x,f,mean,simplify=F)
# Range
tapply(x,f,range)
str(split)
split(x,f)
View(x)
View(f)
lapply(split(x,f),mean)
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
?interaction
interaction(f1,f2)
#Interactions can create empty levels
str(split(x,list(f1,f2)))
# to drop empty levels
str(split(x,list(f1,f2),drop=T))
## message
## warning
?error ##stops executing function
?message
?warning
?stop
#generate warning on purpose
log(-1)
#invisible(x) turns off auto printing
?invisible
printmessage <- function(x) {
if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
?load
printmessage(1)
## [1] "x is greater than zero"
printmessage(NA)
printmessage2 <- function(x) {
if(is.na(x))
print("x is a missing value!")
else if(x>0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage2(x)
?traceback
?debug
?browser
?trace
?recover
rm(list=ls())
mean(x)
traceback()
ln(y-x)
traceback()
ln(y-x)
lm(ny-x)
lm(y-x)
traceback()
lm(y-x)
traceback()
debug(lm)
lm(y-x)
install.packages('plyr')
library(swirl)
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
rm(list = ls())
library(datasets)
data(iris)
?iris
tapply(iris$Sepal.Length,mean)
tapply(iris$SepalLength,mean)
lapply(iris$Sepal.Length,mean)
lapply(iris$Sepal.Length,summary)
lapply(iris$Species,summary)
lapply(iris$Species[virginica],summary)
x <- iris$Species[2]
x <- iris$Species
lapply(iris,summary)
lapply(iris$Sepal.Length,summary)
lapply(iris,summary)
tapply(iris$species,iris,summary)
tapply(iris$Species = 'virginica',summary)
tapply(iris$Species,summary)
lapply(iris$Species,summary)
lapply(iris,iris$Species[3],summary)
lapply(iris,iris$Species['virginica'],summary)
lapply(iris,summary)
lapply(split(iris,summary))
lapply(split(iris),summary))
lapply(split(iris),summary)
lapply(split(iris,iris$Species),summary)
apply(iris[, 1:4],1,mean)
apply(iris[, 1:4],2,mean)
apply(iris,2,mean)
data(mtcars)
?mtcars
lapply(mtcars,mean)
sapply(mtcars,cyl,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
split(mtcars,mtcars$cyl)
tapply(mtcars$cyl,mtcars$mpg,mean)
mean(mtcars$mpg,mtcars$cyl)
apply(mtcars,2,mean)
with(mtcars,tapply(mpg,cyl,mean))
sapply(split(mtcars$mpg,mtcars$cyl),mean)
sapply(split(mtcars$hp,mtcars$cyl),mean)
x <- sapply(split(mtcars$hp,mtcars$cyl),mean)
x
x[3,2]-x[1,2]
x[3]
x[3]-x[1]
debug(ls)
ls()
