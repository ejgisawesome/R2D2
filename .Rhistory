n.readLines(hw,n=47,skip=46)
n.readLines(hw,n=47)
n.readLines(hw,n=48)
readLines(hw,[[47]])
readLines(hw,47)
readLines(hw,48)
data.frame(hw,2,2)
hw
read.Table(hw)
clim<- read.table(hw)
read.table(hw)
clim<-read.csv(hw)
clim[2,]
nrows(clim)
rowsum(clim)
clim[47]
clim[47,]
clim[152:153,]
isNa(clim[,1])
clim[,1]
ozone<-clim[,1]
is.na(ozone)
is.na.data.frame(ozone)
mean(ozone)
summary(ozone)
summary(clim)
clim[,4 <=90;,1<=31]<-NA
clim[,4 <=90]<-NA
clim
clim<-read.csv(hw)
clim
clim2 <- clim[,4<=90]
clim2
for clim[,5] = 5 (
max(clim[,4])
)
for clim[,5] == 5 (
max(clim[,4])
)
for clim[,5] == 5
for [clim[,5] == 5 ]
max(clim[,4])
for clim[,5] == 5
june <- clim[,5] = 6
june <- [clim[,5] = 6]
june <- (clim[,5] = 6)
june
clim
clim<-read.csv(hw)
clim
read.csv(hw,skip=[,5 = 9])
clim
clim[clim[,5=6]]
rm(clim2)
good <- complete.cases(clim)
good
View(clim)
mean(32:61,4)
clim
mean(clim[32:61,4])
juneclim <- clim [which(clim[,5]=6)]
juneclim <- clim [which(clim[,5]==6)]
juneclim <- clim [which(clim$Month ==6)]
juneclim <- clim [which(clim$Month =6)]
juneclim <- clim [which(clim$Month == 6)]
boundary <- clim$Ozone > 31 && clim$Temp > 90
boundary
boundary
home <- read.csv(hw,skip if clim$Ozone <= 31)
clim[clim$Ozone > 31]
clim[clim$Ozone >= 32]
clim
str(clim[NA])
clim[clim$Month == 6,]
clim[clim$Ozone > 31 & clim$Temp > 90]
clim[clim$Ozone > 31 & clim$Temp > 90,]
clim<-read.csv(hw)
clim[clim$Ozone > 31 & clim$Temp > 90,]
clim[clim$Ozone > 31 & clim$Temp > 90 & clim$Ozone ! NA & clim$Temp ! NA,]
clim[clim$Ozone > 31 & clim$Temp > 90 & clim$Ozone != NA & clim$Temp != NA,]
clim[clim$Ozone > 31 & clim$Temp > 90,]
clim
b1 <- clim[clim$Ozone > 31]
b1 <- clim[clim$Ozone > 31,]
b1
b1 <- clim[clim$Ozone > 31 && clim$Ozone == TRUE,]
b1
b1 <- clim[clim$Ozone > 31 && clim$Ozone == integer,]
b1 <- clim[clim$Ozone > 31 && clim$Ozone == "integer",]
b1
boundary <- clim$Ozone > 31 && clim$Temp > 90
clim
clim[clim$Ozone > 31 && clim$Temp > 90,]
clim<-read.csv(hw)
clim[clim$Ozone > 31 && clim$Temp > 90,]
clim
rm(boundary,good,b1)
rm(x,june)
str(clim[NA])
clim[clim$Ozone > 31,]
clim[clim$Ozone > 31 && clim$Temp > 90,]
clim[clim$Ozone > 31 & clim$Temp > 90,]
clim[is.na(clim)]<-0
clim[clim$Ozone > 31 & clim$Temp > 90,]
hazzard <-  clim[clim$Ozone > 31 & clim$Temp > 90,]
mean(hazzard[2,])
hazzard[2,]
hazzard[,2]
mean(hazzard[,2])
mayday <- clim[clim$Month = 5]
mayday <- clim[clim$Month == 5]
mayday <- clim[clim$Month == 5,]
max(mayday)
max(mayday[,2])
max(mayday[,1])
#Swirl
install.packages("swirl")
package_version(swirl)
package_version("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y <- x - 3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()getwd()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R")
file.rename("mytest.R" to "mytest2.R")
?file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2",file.path("testdir3"))
dir.create(file.path('testdir2','testdir3'),recursive = TRUE)
setwd(old.dir)
swirl()
1:20
pi:10
15:1
?":"
seq(1,20)
seq(0,10,by=.5)
seq(5,10,length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(along.with)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse = " ")
c(my_char,"Emmanuel")
my_name <- c(my_char,"Emmanuel")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my.data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c[x[3],x[5],x[7]]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(1:30)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
matrix(1:20,nrow=4,ncol=5)
my_matrix2 <- matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
c("Bill","Gina","Kelly","Sean")
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <_ data.frame(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
c("patient","age","weight","bp","rating","test")
cnames <- c("patient","age","weight","bp","rating","test")
colnames(cnames,my_data)
colnames(my_data,cnames
c''
colnames(my_data,cnames)
?colnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 NOT 7
5 != 7
5 !== 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
?sample
ints
ints>5
which(ints>7)
any(ints <0)
all(ints>0)
#form 1
if(x>3){y<-10} else {y<-0}
#form 1
for(i <- 1:10){if(x[i]>3){y[i]<-10} else {y[i]<-0}
#form 1
for(i in 1:10){if(x[i]>3){y[i]<-10} else {y[i]<-0}
#form 1
for(i in 1:10)if(x[i]>3){y[i]<-10} else {y[i]<-0}
if(x>4){y<-10}else{y<-0}
#form2
y<-if(x<4){10}else{0}
y
#form2
y <- if(x<4){10}else{0}
x
11
1.
install.packages("swirl")
#... (collects all arguments so you don't need to write them all) (first arg in paste())
?paste
?cat #concatenate
#anything after ... can't be partially matched
paste("a","b".sep=":")
#anything after ... can't be partially matched
paste("a","b",sep=":")
paste("a","b",se=":")
#Scoping Rules - Symbol Binding
lm <- function(x){pi*x^2}
#lm function created (bound values to symbol; lm could be your function or stats one)
#environments -- searches environment for the value
lm(3)
lm(1)
search()
#Scoping Rules: lexical scoping OR static scoping
f <- function(x,y) {
x^2 + y /z
}
f(1,2)
make.power(3)
make.power <- function(n){
pow <- function(x){
x^n
}
pow
}
make.power(3)
cube <- make.power(3)
square <- make.power(2)
cube(3)
cube(4)
square(3)
ls(environment(cube))
get("n",environment(cube))
?ls
y <- 10
f <- function(x){
y <- 2
y^2 + g(x)
}
g <- function(x){
x*y
}
f(3)#What is f(3)?
View(g)
f(3)
f(2)
f(4)
#Let's confuse you.  (appearance of dynamic scoping but not really)
g <- function(x){
a<-3
x+a+y
}
g(2)
g <- function(x){
a<-3
x+a+y
g(2)
g <- function(x){
a<-3
x+a+y
g <- function(x){
a<-3
x+a+y
sss
stoppppppp
}
g <- function(x){
a<-3
x+a+y
}
g(2)
rm(list=ls())
g <- function(x){
a<-3
x+a+y
}
g(2)
y=3
g(2)
rm(list=ls()) #CLEAR ENVIRONMENT
nLL<-make.NegLogLik(normals,c(1,FALSE))
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type=1)
make.NegLogLik <- function(data,fixed=c(FALSE,FALSE)) {
params <- fixed
function(p){
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
nLL<-make.NegLogLik(normals,c(1,FALSE))
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type=1)
set.seed(1);normals <- rnorm(100,1,2)
nLL<-make.NegLogLik(normals,c(1,FALSE))
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type=1)
nLL <- make.NegLogLik(normals)
nLL
nLL<-make.NegLogLik(normals,c(1,FALSE))
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type=1)
nLL<-make.NegLogLik(normals,c(1,FALSE))
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type="1")
nLL<-make.NegLogLik(normals,c(1,FALSE))
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type="0")
?plot
nLL<-make.NegLogLik(normals,c(1,FALSE))
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type="l")
nLL<-make.NegLogLik(normals,c(FALSE,2))
x<-seq(.5,1.5,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type="l")
swirl()
library(swirl)
rm(list-ls())
swirl()
class(POSIXlt())
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- "1969-01-01"
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSITXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t11)
months(51)
months(t1)
quarters(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(,t1,units='days'))
difftime(Sys.time(),t1,units='days'))
difftime(Sys.time(),t1,units='days')
install.packages(lubridate)
#advanced date time
install.packages('lubridate')
cd
cd()
rm=list(ls())
rm(list = ls()) #CLEAR ENVIRONMENT
